When working on the group server or HPCs, we generally don't use graphical user interfaces (GUIs), rather we primarily interact with the machines through the command-line interface (CLI). Various shell environments exist but the most common are Bourne-Again Shell (Bash), the default for Ubuntu/WSL; Z shell (Zsh), the default for MacOS; and PowerShell, only used on Windows machines. Zsh is built on top of Bash so the commands are relatively interchangeable but if you'd like more information about the differences, [https://apple.stackexchange.com/questions/361870/what-are-the-practical-differences-between-bash-and-zsh this] stack exchange post describes the difference comprehensively. The primary difference to note is the name of the default configuration environment for each with <code>.bashrc</code> and <code>.bash_profile</code> being for Bash and <code>.zshrc</code> and <code>.zprofile</code> for Zsh. Powershell isn't used often in our group workflow as most machines use a Linux-based environment. However, if you need to do anything on your Windows machine outside of WSL, it may be useful to know a little about it. The syntax and commands are very different between PowerShell and Bash/Zsh.

==Tutorials==
===Bash/Zsh===
* The [https://ubuntu.com/tutorials/command-line-for-beginners#1-overview Ubuntu] website provides a good tutorial on how to start with the command line and some basics with plumbing. If you're using WSL and are not in the Ubuntu operating system (OS), WSL is already the Linux terminal, you can skim over the first part in section 3.
* For Bash scripting [https://www.geeksforgeeks.org/bash-scripting-introduction-to-bash-and-bash-scripting/ geeksforgeeks] provides good basics for scripting and program control methods
* For Zsh scripting [https://helpful.wiki/zsh/ Austin Traver's site] provides a more comprehensive guide on scripting along with various other tutorials for MacOS

===PowerShell===
* Microsoft provides [https://learn.microsoft.com/en-us/training/modules/introduction-to-powershell/ tutorials for PowerShell] on their website

==Tips/Tricks/Tools==
===Terminal Emulators===
While the stock terminal emulator for most OS's are good enough, added functionality and customizability can be gleaned by using other programs. The most popular ones are listed below
* MacOS: [https://iterm2.com/index.html iTerm2] has a lot of customizability and extra features compared to Terminal and a large following
* Windows: [https://apps.microsoft.com/detail/9n0dx20hk701?hl=en-US&gl=US Windows Terminal] is the replacement for Windows Console and can run any command-line app in separate tabs

===Programs===
Many of these programs are optional as they fix some niche issues. I would recommend not using/installing these programs at first until you're comfortable with the default methods they replace as they won't be available on all computers.
* [https://neovim.io/ Neovim] or <code>nvim</code> is a modernized version of <code>vim</code> which is extremely modifiable and uses <code>Lua</code> for plugins. [https://github.com/nvim-lua/kickstart.nvim Kickstart] is a good starting point for plugins which you can choose to edit later
* [https://github.com/tmux/tmux/wiki tmux] is a terminal multiplexer, allowing you to switch between programs and/or run them in background. This [https://www.youtube.com/watch?v=DzNmUNvnB04 youtube video] provides a good starting point for <code>.tmux.conf</code>.
* [https://github.com/junegunn/fzf fzf] is an interactive filter which uses a fuzzy matching algorithm. Very useful for reverse searching commands and works well with <code>tmux</code> and <code>nvim</code>.
* [https://github.com/ajeetdsouza/zoxide Zoxide] is a replacement for cd which uses <code>fzf</code> to more easily switch between commonly used directories.

===Tips===
* For Window Terminal, unbind copy and paste from <code>ctrl + c</code> and <code>ctrl + v</code> and replace it with <code>ctrl + shift + c</code> and <code>ctrl + shift + v</code> respectively. This will allow you to do the following shortcuts
* Pressing up on the arrow keys allows you to pull previously input commands
* <code>esc</code> then the left or right arrow key can move you by word (For MacOS, the <code>option</code> key also works)
* Hidden files start with <code>.</code> like <code>.bashrc</code> above. These files won't normally be shown when using <code>ls</code>. Use <code>ls -a</code> to see all files, including hidden files or better yet, use <code>ls -halF</code>. Even better yet, the group server's default <code>.bashrc</code> file has <code>ll</code> aliased to <code>ls -alF</code>.

===Terminal Shortcuts===
Shortcuts are applicable for both Linux/WSL and MacOS terminals. For MacOS, shortcuts are as is (i.e. do not replace <code>ctrl</code> with <code>cmd</code>)
* <code>ctrl + a</code>: Move the curser to the start of the line
* <code>ctrl + e</code>: Move the curser to the end of the line
* <code>ctrl + c</code>: clear current line/kill current process 
* <code>ctrl + l</code>: clear entire terminal
* <code>ctrl + z</code>: Pause the current process (can be restarted with the command <code>fg</code>)
* <code>ctrl + r</code>: Reverse search previously input command

===Dotfile Management===
The configuration files for various programs are hidden files (e.g. <code>.bashrc</code>, <code>.zshrc</code>, <code>.tmux.conf</code>) and are usually in your <code>$HOME</code> directory. This is fine at first but when you configure your environment more, it quickly becomes difficult to manage them, especially when you have multiple computers you work with. The following [https://www.atlassian.com/git/tutorials/dotfiles tutorial] will help with managing dotfiles through a bare git directory. This method is slightly more difficult as you need some basic understanding of git but is good as git is installed on pretty much every HPC we use. Another method would be to [https://www.gnu.org/software/stow/ GNU Stow] but this would require downloading the program on the HPC first.
